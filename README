Τρίτη εργασία στα λειτουργικά συστήματα:
E
Όνομα: Χαράλαμπος
Επώνυμο: Κιοσές

Στο αρχείο tar υποβάλλω τα εξής αρχεία:
cpp files:
third.cpp: main function
LRU.cpp: LRUs algorithm functions
ws.cpp: WS algorithm functions
Inv_ptable.cpp: Inverted page table functions

header files:
LRU.h: class LRU and declarations
ws.h: class WS >>
Inv_ptable.h: Inverted page table class >>

Makefile:	make:compile of all files
			make run : Ενδεικτική εκτέλεση με τον LRU, frames=1024,q=32,max=50000
			make clean : διαγραφή του εκτελέσιμου

Δεν περιλαμβάνονται τα 2 αρχεία για τις δοκιμές.

Σύντομη περιγραφή:
	Στο πρώτο όρισμα τις γραμμής εντολών ορίζεται ποιός αλγόριθμος θα χρησιμοποιηθεί,
αν argv[1]=0->LRU,αλιώς αν argv[1]=1->WS. Δεν έχουν γίνει όλοι οι έλεγχοι εγκυρότητας
όπως επίσης δεν δίνεται η δυνατότητα να δωθεί max χωρίς να δωθεί το 4ο όρισμα, απλά 
δίνεται ενα όρισμα το οποίο στην περίπτωση του LRU δεν χρησιμοποιείται. Η main περιέχει
το άνοιγμα/κλείσιμο, διάβασμα των αρχείων, τις μετρικές καθώς και το κάλεσμα των συναρτή-
σεων Inv_ptable::add_data_LRU(...),Inv_ptable::add_data_WS(...). Αυτές είναι οι συναρτήσεις
που με τη βοήθεια των συναρτήσεων μελών των κλάσεων LRU και WS υλοποιούν τους αλγορίθμους.

class Tdata: Περιέχει τις πληροφορίες του πλαισίου (frame id ) καθώς και process id ( 0ή1 
ανάλογα τα αρχεία) καθώς και ενα αντικείμενο dirty που χρησιμοποιείτα για να καταλάβω πότε
γίνεται εγγραφή στον δίσκο.

class Inv_ptable : έχει ένα πίνακα απο δείκτες σε Tdata. Αυτός ο πίνακας απο δείκτες προσωμοιώνει
τον page table.

class LRU : Έχει ενα πίνακα απο ακέραιους (positions) το οποίο λείτουργεί σαν 1-1 αντιστοιχία με 
τον πίνακα του page table. Κάθε φορά που γίνεται αναφορά σε μία εγγραφή του page table ενημερώνεται
η αντίστοιχη θέση του πίνακα positions. Αυτό γίνεται αντιγαφοντας στα κελιά του την μεταβλητή counter
η οποία αυξάνεται για κάθε read/write. Με αυτό τον τρόπο όταν χρειαστεί να αντικατασταθεί ενα πλαίσιο
σελίδας, γίνεται αναζήτηση της μικρότερης εγγραφής απο το positions και αντικατάσταση. Σημαντικό ρόλο
έχει η συνάρτηση update η οποία ενημερώνει τον συγκεκριμμένο πίνακα.

class WS : Έχει έναν πίνακα απο δείκτες σε Tdata ώστε να μπορεί να "επικοινωνήσει" με τη δομή του
page table, αυτοί οι δείκτες είναι και το ws. O πίνακας occur χρησιμοποιείται ώστε να ξέρουμε πόσο
πρόσφατα έγινε αναφορά σε κάποιο απο τα στοιχεία του ws. Η λειτουργία του WS γίνεται μέσο της 
συνάρτησης Inv_ptable::add_data_WS(...) στην οποία περιγράφονται όλες οι δινατές περιπτώσεις.
Στην δομή του ws κρατάω τις τελευταίες ws_count αναφορές του ptable.Όταν πρέπει να γίνει αντικατάσταση
μιας εγγραφής του ws επιλέγεται αυτή με τη μικρότερη αντιστοιχία σε occur. Όταν πρέπει να γίνει διαγραφή
απο το p table και αντικατάσταση αφαιρείται η πρώτη εγγραφή που δεν ανήκει σε ενα απο τα 2 ws (ενα για
κάθε αρχείο). Υπάρχουν ειδικές περιπτώσεις όπως τι γίνεται όταν το ws περιέχει όλο το ptable.

Μετρηκές: το πρόγραμμα μετράει πόσα read, write γίνονται, πόσες γραμμές διαβάστικαν απο κάθε αρχείο καθώς
και τον συνολικό αριθμό τους, τα page faults(αντικαταστάσεις και εισαγωγές) και οι εγγραφές στον δίσκο(
replace εγγραφής με dirty=1)

Τα αποτελέσματα του LRU φαίνονται λογικά π.χ. frames=1024, q=32, max=50000 :
50000 lines from f1
50000 lines from f2
85345 reads
14655 writes
1329 page faults (1,3%)
305 page replaces
228 page saves

Τα αποτελέσματα του WS δεν είναι σωστά.